package Lab9;
import java.util.*;

public class Labnakrub {

    static class Graphs<T> {
        private Map<T, List<T>> map = new HashMap<>();

        public void addVertex(T s) {
            map.put(s, new LinkedList<T>());
        }

        public void addEdge(T source, T destination, boolean bidirectional) {
            if (!map.containsKey(source)) {
                addVertex(source);
            }

            if (!map.containsKey(destination)) {
                addVertex(destination);
            }

            map.get(source).add(destination);
            if (bidirectional) {
                map.get(destination).add(source);
            }
        }

        public void getVertexCount() {
            System.out.println("The graph has " + map.size() + (map.size() == 1 ? " vertex." : " vertices."));
        }

        public void getEdgesCount(boolean bidirectional) {
            int count = 0;
            for (T v : map.keySet()) {
                count += map.get(v).size();
            }
            if (bidirectional) {
                count /= 2;
            }
            System.out.println("The graph has " + count + (count == 1 ? " edge." : " edges."));
        }

        public void hasEdge(T s, T d) {
            if (map.get(s).contains(d)) {
                System.out.println("The graph has an edge between vertex " + s + " and " + d + ".");
            } else {
                System.out.println("The graph has no edge between " + s + " and " + d + ".");
            }
        }

        public void hasVertex(T s) {
            if (map.containsKey(s)) {
                System.out.println("The graph contains " + s + " as a vertex.");
            } else {
                System.out.println("The graph does not contain " + s + " as a vertex.");
            }
        }

       
        public String toString() {
            StringBuilder builder = new StringBuilder();

            for (T v : map.keySet()) {
                builder.append(v.toString()).append(": ");
                for (T w : map.get(v)) {
                    builder.append(w.toString()).append(" ");
                }
                builder.append("\n");
            }

            return builder.toString();
        }
    }

    public static void main(String[] args) {
        Graphs<Integer> g = new Graphs<>();
        g.addEdge(0, 1, true);
        g.addEdge(0, 4, true);
        g.addEdge(1, 2, true);
        g.addEdge(1, 3, true);
        g.addEdge(1, 4, true);
        g.addEdge(2, 3, true);
        g.addEdge(3, 4, true);

        System.out.println("Graph: ");
        System.out.println(g);

        g.getVertexCount();
        g.getEdgesCount(true);
        g.hasEdge(3, 4);
        g.hasVertex(5);
    }

}
